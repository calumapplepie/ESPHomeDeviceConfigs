esphome:
  name: smartspeakeresp32
  friendly_name: SmartSpeakerESP32

esp32:
  board: arduino_nano_esp32
  framework:
    type: esp-idf
    version: recommended

external_components:
  - source: github://pr#8574
    components: [ adc_microphone ]
    refresh: 1min

# Enable logging
logger:
  level: VERY_VERBOSE
  logs:
    ledc.output: INFO


# Enable Home Assistant API
api:
  encryption:
    key: !secret smartspeaker_ha_key

button:
  - platform: template
    name: StartRecord
    id: mic_button
    on_press:
      then:
        - microphone.capture: mic_id
        - delay: 1s
        - microphone.stop_capture: mic_id

ota:
  - platform: esphome
    password: !secret smartspeaker_ota_key

wifi:
  networks: 
  - ssid: !secret wifi_ssid
    password: !secret wifi_password
    hidden: true
    bssid: 9C:EF:D5:F9:59:EA

  reboot_timeout: 3min # we seem to run into the 'issues requiring a full reboot' every time

  manual_ip:
    static_ip: 10.20.0.21
    gateway: 10.20.0.1
    subnet: 255.255.255.0

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Smartspeakeresp32"
    password: "pagVEo7Gwzda"

captive_portal:
    

# test board led
light:
  - platform: rgb
    name: "Living Room Lights"
    red: output_RED
    green: output_GREEN
    blue: output_BLUE

output:
  - platform: ledc
    pin: GPIO46
    id: output_RED
    inverted: true

  - platform: ledc
    pin: GPIO0
    id: output_GREEN
    inverted: true

  - platform: ledc
    pin: GPIO45
    id: output_BLUE
    inverted: true


# i2c output (its not actually i2c, but we can pretend)
# TODO: finish making`
i2s_audio:
  - id: i2s_output
    # i2s_output data pin is gpio10
    i2s_lrclk_pin:
      number: GPIO12
    i2s_bclk_pin:
      number: GPIO13

speaker:
  - platform: i2s_audio
    dac_type: external
    i2s_dout_pin: GPIO11
    i2s_comm_fmt: stand_msb
    channel: mono

microphone:
  - platform: adc_microphone
    id: mic_id
    adc_pin: GPIO2
    on_data:
      - logger.log:
          format: "Received %d bytes"
          args: ['x.size()']
      - sensor.template.publish:
          id: adc_average
          state: !lambda |-
            int size = x.size();
            double sum  = 0;
            for(auto i : x) {
              sum += i;
            }
            return sum / size;

sensor:
  id: adc_average
  name: "ADC Average Value"
  platform: template
  accuracy_decimals: 5
  expire_after: 2s

mqtt:
  broker: 10.20.0.1
  username: calumspeaker
  password: !secret mqtt_password_calumspeaker
  discovery: False
  log_topic: null

